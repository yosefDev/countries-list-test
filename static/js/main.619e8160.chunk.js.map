{"version":3,"sources":["redux/singleCountry.js","redux/lisOfCountries.js","components/country/country.js","components/search/search.js","components/loader/loader.js","components/countryPopup/countryPopup.js","App.js","serviceWorker.js","index.js"],"names":["store","createStore","state","arguments","length","undefined","_ref","type","country","dispatch","lisOfCountries","handleClick","react_default","a","createElement","className","onClick","style","backgroundImage","concat","flag","name","nativeName","region","search","handleChange","onChange","placeholder","loader","countryPopup","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","target","currentTarget","singleCountryStore","subscribe","setState","getState","id","src","alt","capital","languages","map","lang","key","Component","App","errorMsg","searchTerm","searchCountry","value","trim","toLowerCase","selectCountry","lisOfCountriesStore","axios","get","then","response","data","catch","error","_this2","_this$state","components_search_search","filter","v","includes","components_country_country","components_countryPopup_countryPopup","components_loader_loader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.619e8160.chunk.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\n\r\n/**\r\n * This is a reducer, a pure function with (state, action) => state signature.\r\n * It describes how an action transforms the state into the next state.\r\n *\r\n * The shape of the state is up to you: it can be a primitive, an array, an object,\r\n * or even an Immutable.js data structure. The only important part is that you should\r\n * not mutate the state object, but return a new object if the state changes.\r\n *\r\n * In this example, we use a `switch` statement and strings, but you can use a helper that\r\n * follows a different convention (such as function maps) if it makes sense for your\r\n * project.\r\n */\r\nfunction counter(state = 0, { type, country }) {\r\n\tswitch (type) {\r\n\t\tcase 'SINGLE_COUNTRY':\r\n\t\t\treturn country\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\n// Create a Redux store holding the state of your app.\r\n// Its API is { subscribe, dispatch, getState }.\r\nlet store = createStore(counter)\r\n\r\n// You can use subscribe() to update the UI in response to state changes.\r\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\r\n// However it can also be handy to persist the current state in the localStorage.\r\n\r\n// store.subscribe(() => console.log(store.getState()))\r\n\r\n// // The only way to mutate the internal state is to dispatch an action.\r\n// // The actions can be serialized, logged or stored and later replayed.\r\nstore.dispatch({ type: 'INCREMENT' })\r\n// // 1\r\n// store.dispatch({ type: 'INCREMENT' })\r\n// // 2\r\n// store.dispatch({ type: 'DECREMENT' })\r\n// // 1\r\n\r\n\r\nexport default store;","import { createStore } from 'redux';\r\n\r\n\r\n/**\r\n * This is a reducer, a pure function with (state, action) => state signature.\r\n * It describes how an action transforms the state into the next state.\r\n *\r\n * The shape of the state is up to you: it can be a primitive, an array, an object,\r\n * or even an Immutable.js data structure. The only important part is that you should\r\n * not mutate the state object, but return a new object if the state changes.\r\n *\r\n * In this example, we use a `switch` statement and strings, but you can use a helper that\r\n * follows a different convention (such as function maps) if it makes sense for your\r\n * project.\r\n */\r\nfunction counter(state = 0, {type, lisOfCountries}) {\r\n  switch (type) {\r\n    case 'LIST_OF_COUNTRIES':\r\n      return lisOfCountries\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n// Create a Redux store holding the state of your app.\r\n// Its API is { subscribe, dispatch, getState }.\r\nlet store = createStore(counter)\r\n\r\n// You can use subscribe() to update the UI in response to state changes.\r\n// Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\r\n// However it can also be handy to persist the current state in the localStorage.\r\n\r\n// store.subscribe(() => console.log(store.getState()))\r\n\r\n// // The only way to mutate the internal state is to dispatch an action.\r\n// // The actions can be serialized, logged or stored and later replayed.\r\n store.dispatch({ type: 'INCREMENT' })\r\n// // 1\r\n// store.dispatch({ type: 'INCREMENT' })\r\n// // 2\r\n// store.dispatch({ type: 'DECREMENT' })\r\n// // 1\r\n\r\n\r\nexport default store;","import React from 'react';\r\n\r\nimport './country.css'\r\nconst country = ({ country, handleClick }) => {\r\n\treturn (\r\n\t\t<li className=\"country\" onClick={() => handleClick(country)}>\r\n\t\t\t<div className=\"flag\" style={{ backgroundImage: `url(${country.flag})` }}>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"info\">\r\n\t\t\t\t<div className=\"nameWrapper\">\r\n\t\t\t\t\t<div className=\"name\">{country.name}</div>\r\n\t\t\t\t\t{country.name !== country.nativeName && <div className=\"name\">{` - ${country.nativeName}`}</div>}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"region\">{country.region}</div>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t)\r\n}\r\n\r\nexport default country\r\n\r\n","import React from 'react';\r\n\r\nimport './search.css';\r\n\r\nconst search = ({handleChange}) => {\r\n    return (\r\n       <input type=\"search\" className=\"search\" onChange={handleChange} placeholder=\"Search Country By Name\" />\r\n    );\r\n};\r\n\r\nexport default search;","import React from 'react';\r\n\r\nimport './loader.css'\r\n\r\nconst loader = () => {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    );\r\n};\r\n\r\nexport default loader;","import React, { Component } from 'react';\r\n\r\nimport singleCountryStore from '../../redux/singleCountry';\r\n\r\nimport './countryPopup.css'\r\n\r\nclass countryPopup extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tsingleCountryStore.subscribe(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcountry: singleCountryStore.getState()\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tstate = {\r\n\t\tcountry: \"\"\r\n\t}\r\n\r\n\tonClick = (e) => {\r\n\t\tconst { handleClick } = this.props;\r\n\t\tif (e.target === e.currentTarget) {\r\n\t\t\thandleClick(\"\")\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tconst { country } = this.state;\r\n\t\tif (country) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"overlay\" onClick={this.onClick}>\r\n\t\t\t\t\t<div className=\"countryPopup\" id=\"countryPopup\">\r\n\t\t\t\t\t\t<h2 className=\"title\">{country.name}{country.name !== country.nativeName && ` - ${country.nativeName}`}</h2>\r\n\t\t\t\t\t\t<img className=\"flag\" src={country.flag} alt={country.name} />\r\n\t\t\t\t\t\t<div className=\"info\">\r\n\t\t\t\t\t\t\t<div className=\"region\">Region: <span className=\"infoData\">{country.region}</span></div>\r\n\t\t\t\t\t\t\t<div className=\"capital\">Capital: <span className=\"infoData\">{country.capital}</span></div>\r\n\t\t\t\t\t\t\t<div className=\"languages\">Languages: <ul className=\"langWrapper\">\r\n\t\t\t\t\t\t\t\t{country.languages.map(lang => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<li key={`${country.name}_${lang.name}`} className=\"infoData\">{lang.name}<br /></li>\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default countryPopup;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport singleCountryStore from './redux/singleCountry';\r\nimport lisOfCountriesStore from './redux/lisOfCountries';\r\n\r\nimport Country from './components/country/country';\r\nimport Search from './components/search/search';\r\nimport Loader from './components/loader/loader';\r\nimport CountryPoup from './components/countryPopup/countryPopup';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tlisOfCountriesStore.subscribe(() => {\r\n\t\t\tthis.setState({\r\n\t\t\t\tlisOfCountries: lisOfCountriesStore.getState()\r\n\t\t\t})\r\n\t\t})\r\n\r\n\t\taxios.get('https://restcountries.eu/rest/v2/all')\r\n\t\t\t.then((response) => {\r\n\t\t\t\tlisOfCountriesStore.dispatch({ \r\n\t\t\t\t\ttype: 'LIST_OF_COUNTRIES',\r\n\t\t\t\t\tlisOfCountries: response.data \r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tthis.setState({ errorMsg: \"something went wrong. please try again later\" })\r\n\t\t\t});\r\n\r\n\t}\r\n\r\n\tstate = {\r\n\t\tlisOfCountries: \"\",\r\n\t\terrorMsg: \"\",\r\n\t\tsearchTerm: \"\"\r\n\t}\r\n\r\n\tsearchCountry = (search) => {\r\n\t\tlet searchTerm = search.target.value.trim().toLowerCase();\r\n\t\tthis.setState({ searchTerm })\r\n\t}\r\n\r\n\tselectCountry = (country) => {\r\n\t\tsingleCountryStore.dispatch({\r\n\t\t\ttype: 'SINGLE_COUNTRY',\r\n\t\t\tcountry\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { lisOfCountries, searchTerm, errorMsg } = this.state;\r\n\r\n\t\tif (lisOfCountries) {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"app\">\r\n\t\t\t\t\t<header className=\"header\">\r\n\t\t\t\t\t\t<h1 className=\"title\">Countries<span>({lisOfCountries.length})</span></h1>\r\n\t\t\t\t\t\t<Search handleChange={this.searchCountry} />\r\n\t\t\t\t\t</header>\r\n\t\t\t\t\t<ul className=\"lisOfCountries\">\r\n\t\t\t\t\t\t{lisOfCountries.filter(v => v.name.toLowerCase().includes(searchTerm)).map(country => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Country key={country.name} country={country} handleClick={this.selectCountry} />\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t\t<CountryPoup handleClick={this.selectCountry} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn errorMsg || <Loader />\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}